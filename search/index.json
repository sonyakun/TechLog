[{"content":" この記事はMisskey Advent Calendar 2023 の24日目の記事です。\nはじめに 僕はmisspyというライブラリを書いています。 今回はそのmisspyについて書いていこうと思います。\nえっ？別の名前のライブラリ作ってたじゃないかって？このライブラリと名前が紛らわしいから消しました\u0026hellip;(ちなみにMisskey Advent Calendar 9日目の方です)\nなんで作った なぜ作ったかを簡単に言うと、Misskey.pyが非同期処理に対応していないから(4.1.0現在)です。\n別にそれだけなら外部で実装すればいいんですけど、僕は面倒臭いので自分でライブラリごと作ることにしました。それに、一から自分で作ったほうが自分が思うように作れるので。(コードがいまいちわからないもの(ほかの方が作ったライブラリとか)を改造することは苦手なんです\u0026hellip;)\nmisspyのソースコードについて 最初期のmisspyのコード ※これは何も出力しません。タイムラインに接続してないので。\n最初期のmisspyは今のような形式ではなく、classに特定の名称の関数を作成してその下にコードを書く脳筋実装でした。また、httpxを非同期リクエストに利用していたので今より多少速度は遅かったと思います。\n当時の僕はクラス式の実装(?)に納得がいかなかったみたいで、新しくhookっていうクラスを追加しました。\nリクエスト部分とWebSocket部分をmisspy-dev/coreに移動して、httpの非同期リクエスト部分をaiohttpに置き換えて高速化しました。websocketはaiohttpが対応していたのですが、調子が良くないので今のところwebsocketsを利用しています。\nだけど、当時の僕はそれに納得がいかなかったみたいで、新しくhookっていうクラスを追加しました(何で！？)。これもやっぱり脳筋実装です。\n現在 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import misspy bot = misspy.Bot(\u0026#34;misskey.io\u0026#34;, \u0026#34;\u0026#34;) async def on_ready(): await bot.connect(misspy.localTimeline) async def on_note(ctx, message): print(\u0026#34;------------\u0026#34;) print(message) print(\u0026#34;------------\u0026#34;) bot.add_hook(\u0026#34;ready\u0026#34;, on_ready) bot.add_hook(\u0026#34;note\u0026#34;, on_note) bot.run() いろいろした結果、こんな感じになりました。 ちなみに、こんな構造になったことで、別のファイルに関数を分けておくことができるようになりました。 ただし、botにアクセスできないと何もできないので、ちょっと改良中です。\n今後やりたいこと 今後は、上に書いたように、discord.pyのCogsとextensionのように別ファイルでもbotを利用できるようにしたりしたいと思います。\n","date":"2023-12-23T19:00:00Z","permalink":"https://sonyakun.github.io/TechLog/post/2023/12/23/mk-py-wrapper-231223/","title":"Misskey8ヶ月目の人がMisskeyのPythonラッパーを作っている話"},{"content":"HexoっていうSSGが気になったので試してみた。\nえっ？なんで学生が深夜にこんなことしてるかって？ おっと、それ以上はいけない\nHexoってなんだよ Node.js製の強力なブログフレームワークらしいです。\nプラグインで拡張できたり、もちろんテーマも使えます。\nテーマ 公式サイトだったりGitHubのトピックだったりで探すのがおすすめ。\nおすすめなのは、Icarusです。日本でも使っている方がたまにいるのでトラブルが起きてもどうにかなりそうなので\u0026hellip;\nプラグイン sitemap.xmlを自動生成してくれるhexo-generator-sitemapとかは入れたほうがいいと思います。 hexo-generator-sitemapだとGoogleに登録できませんでした\u0026hellip;ちゃんと動くhexo-generator-seo-friendly-sitemapがいいと思います。\n構築 ※Node.jsがインストールされている前提で進みます。\nまず、npm install hexo-cli -gでHexoのCLIをインストールします。\nインストールしたら、ブログ用のファイルを生成したいディレクトリに移動して、hexo init .を実行します。\n以下のようなファイル構成になると思います。\n1 2 3 4 5 6 7 8 ├─.github ├─node_modules │ └─... ├─scaffolds ├─source │ └─_posts ├─package.json └─themes 一応この状態でも_posts直下に.mdを作成してyarn serverすれば起動できます。\nでもせっかくなので、テーマを変えてみます。\nテーマを変える 今回は、Icarusを利用します。 npm install hexo-theme-icarusしてhexo config theme icarusします。 でも、テーマによっては中華フォント(Microsoft YaHeiなど)になっている場合があります。\nicarusならnode_modules\\hexo-theme-icarus\\include\\style\\base.stylに行き、Microsoft Yaheiと書いてある部分をすべてsans-serifなどに変更します。そうすれば治ります。\n記事を書くときに覚えておくといいこと タグやカテゴリーは以下のように書く。\n1 2 3 4 5 6 title: Hexo date: 0000-00-00 00:00 categories: - tech tags: - hexo カスタマイズ テーマは_config.{テーマ名}.ymlである程度カスタマイズできるようです。\n方法は自分で調べてください(丸投げ)\n生成 htmlを出力するにはhexo generateを入力してください。入力すると、publicフォルダにhtmlが生成されます。\nめっちゃ書くのつかれた...\n","date":"2023-12-07T17:00:00Z","permalink":"https://sonyakun.github.io/TechLog/post/2023/12/07/hexo%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E6%A7%8B%E7%AF%89/","title":"Hexoを使ってブログを構築"}]